{"version":3,"sources":["components/SudokuValueBox.js","components/SudokuBoard.js","App.js","serviceWorker.js","index.js"],"names":["SudokuValueBox","props","useState","value","setValue","styleName","wasGiven","className","type","onChange","e","target","newValue","split","pop","index","SudokuBoard","Array","fill","cells","setCells","originalBoard","setOriginalBoard","updatingBoard","setUpdatingBoard","useEffect","GetBoard","fetch","method","then","response","json","data","formattedBoard","FormatBoard","board","PopulateBoard","catch","err","i","length","y","tempValuesHolder","push","UpdateOriginalBoard","x","Math","floor","Number","map","element","key","onClick","body","JSON","stringify","currentBoard","headers","isSuccessful","solution","edittedBoard","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.5035c251.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst SudokuValueBox = (props) => {\r\n    const [value, setValue] = useState(0);\r\n\r\n    const styleName = props.wasGiven? \"sudoku_value_box\" : \"sudoku_value_box unsolved\";\r\n\r\n    const UpdateValue = (e) => {\r\n        if (props.value === 0) {\r\n            if (e.target.value === \"\") {\r\n                setValue(0)\r\n            } else {\r\n                const tempValue = e.target.value;\r\n                const tempArray = tempValue.split(\"\");\r\n                const newValue = tempArray.pop();\r\n                setValue(newValue)\r\n                props.onChange({index: props.index, value: newValue})\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styleName}>\r\n            <input className=\"value_box_input\" type=\"text\" value={props.value === 0 ? value : props.value} onChange={UpdateValue} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SudokuValueBox;","import React, { useState, useEffect } from 'react';\r\nimport SudokuValueBox from './SudokuValueBox';\r\n\r\nconst SudokuBoard = () => {\r\n    const [cells, setCells] = useState(new Array(81).fill(0));\r\n    const [originalBoard, setOriginalBoard] = useState([]);\r\n    const [updatingBoard, setUpdatingBoard] = useState([]);\r\n\r\n    useEffect(() => {\r\n        GetBoard();\r\n    }, []);\r\n\r\n    const GetBoard = () => {\r\n        fetch('https://sugoku.herokuapp.com/board?difficulty=easy', {\r\n            method: 'get'\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const formattedBoard = FormatBoard(data.board)\r\n                setOriginalBoard(formattedBoard);\r\n                setUpdatingBoard(formattedBoard);\r\n                PopulateBoard(formattedBoard);\r\n            })\r\n            .catch((err) => {\r\n                // Error :(\r\n            });\r\n    }\r\n\r\n    const GetSolution = () => {\r\n        fetch('/api/sudoku/get-solution', {\r\n            method: 'post',\r\n            body: JSON.stringify({currentBoard: originalBoard}),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.isSuccessful) {\r\n                    PopulateBoard(data.solution);\r\n                    setUpdatingBoard(data.solution);\r\n                } else {\r\n\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                // Error :(\r\n            });\r\n    }\r\n\r\n    const SubmitAnswer = () => {\r\n        fetch('/api/sudoku/check-answer', {\r\n            method: 'post',\r\n            body: JSON.stringify({originalBoard: originalBoard, edittedBoard: updatingBoard}),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.isSuccessful) {\r\n                    // console.log(\"Answer was correct\");\r\n                    // PopulateBoard(data.solution);\r\n                } else {\r\n                    // console.log(\"Answer was in correct\");\r\n\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                // Error :(\r\n            });\r\n    }\r\n\r\n    const FormatBoard = (board) => {\r\n        for (let i = 0; i < board.length; i++) {\r\n            for (let y = 0; y < board.length; y++) {\r\n                const wasGiven = board[i][y]!==0;\r\n                board[i][y] = {value: board[i][y],wasGiven: wasGiven}\r\n            }\r\n        }\r\n        return board;\r\n    }\r\n\r\n    const PopulateBoard = (board) => {\r\n        var tempValuesHolder = [];\r\n\r\n        for (let i = 0; i < board.length; i++) {\r\n            for (let y = 0; y < board.length; y++) {\r\n                tempValuesHolder.push(board[i][y]);\r\n            }\r\n        }\r\n        setCells(tempValuesHolder);\r\n    }\r\n\r\n    const UpdateOriginalBoard = ({index, value}) => {\r\n        const x = Math.floor(index / 9)\r\n        const y = index > 8? index % 9 : index \r\n        updatingBoard[x][y].value = Number(value);\r\n        setUpdatingBoard(updatingBoard);\r\n    }\r\n\r\n    return (\r\n        <div className=\"sudoku_board\">\r\n            {cells.map((element, index) => {\r\n                return <SudokuValueBox key={index} index={index} {...element} onChange={UpdateOriginalBoard} />\r\n            })}\r\n            <button className=\"new_btn board_btn\" onClick={GetBoard}>GENERATE</button>\r\n            <button className=\"solution_btn board_btn\" onClick={GetSolution}>SOLUTION</button>\r\n            <button className=\"submit_btn board_btn\" onClick={SubmitAnswer}>SUBMIT</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SudokuBoard;","import React from 'react';\nimport SudokuBoard from './components/SudokuBoard';\nimport './styles/App.css';\nimport './styles/SudokuBoard.css';\nimport './styles/SudokuValueBox.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">SUDOKU SOLVER <span>ALPHA</span></h1>\n      <SudokuBoard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}