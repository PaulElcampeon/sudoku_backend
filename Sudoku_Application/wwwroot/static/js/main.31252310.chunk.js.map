{"version":3,"sources":["components/SudokuValueBox.js","components/SudokuBoard.js","App.js","serviceWorker.js","index.js"],"names":["SudokuValueBox","props","styleName","value","className","SudokuBoard","useState","Array","fill","cells","setCells","useEffect","GetBoard","fetch","method","then","response","json","data","board","tempValuesHolder","i","length","y","push","catch","err","map","element","index","key","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"sRAYeA,EAVQ,SAACC,GAEpB,IAAMC,EAA4B,IAAhBD,EAAME,MAAa,4BAA8B,mBACnE,OACI,yBAAKC,UAAWF,GACXD,EAAME,QCsCJE,EA1CK,WAAO,IAAD,EACIC,mBAAS,IAAIC,MAAM,IAAIC,KAAK,IADhC,mBACfC,EADe,KACRC,EADQ,KAGtBC,qBAAU,WACNC,MACD,IAEH,IAAMA,EAAW,WACXC,MAAM,qDAAsD,CAC1DC,OAAQ,QAEPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAGF,IAFA,IAAMC,EAAQD,EAAKC,MACfC,EAAmB,GACdC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAC9B,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAMG,OAAQC,IAC9BH,EAAiBI,KAAKL,EAAME,GAAGE,IAGvCb,EAASU,MAEZK,OAAM,SAACC,QAShB,OACI,yBAAKtB,UAAU,gBACVK,EAAMkB,KAAI,SAACC,EAASC,GACjB,OAAO,kBAAC,EAAD,CAAgBC,IAAKD,EAAO1B,MAAOyB,OAE9C,4BAAQxB,UAAU,oBAAoB2B,QAASnB,GAA/C,OACA,4BAAQR,UAAU,yBAAyB2B,QAV/B,cAUZ,c,kBC1BGC,MARf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,QCGc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.31252310.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SudokuValueBox = (props) => {\r\n\r\n    const styleName = props.value === 0? \"sudoku_value_box unsolved\" : \"sudoku_value_box\";\r\n    return (\r\n        <div className={styleName}>\r\n            {props.value}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SudokuValueBox;","import React, { useState, useEffect } from 'react';\r\nimport SudokuValueBox from './SudokuValueBox';\r\n\r\nconst SudokuBoard = () => {\r\n    const [cells, setCells] = useState(new Array(81).fill(0));\r\n\r\n    useEffect(() => {\r\n        GetBoard();\r\n    }, []);\r\n\r\n    const GetBoard = () => {\r\n          fetch('https://sugoku.herokuapp.com/board?difficulty=easy', {\r\n            method: 'get'\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const board = data.board;\r\n                var tempValuesHolder = [];\r\n                for (let i = 0; i < board.length; i++) {\r\n                    for (let y = 0; y < board.length; y++) {\r\n                        tempValuesHolder.push(board[i][y]);\r\n                    }\r\n                }\r\n                setCells(tempValuesHolder);\r\n            })\r\n            .catch((err) => {\r\n                // Error :(\r\n            });\r\n    }\r\n\r\n    const GetSolution = () => {\r\n\r\n    } \r\n\r\n    return (\r\n        <div className=\"sudoku_board\">\r\n            {cells.map((element, index) => {\r\n                return <SudokuValueBox key={index} value={element} />\r\n            })}\r\n            <button className=\"new_btn board_btn\" onClick={GetBoard}>NEW</button>\r\n            <button className=\"solution_btn board_btn\" onClick={GetSolution}>SOLUTION</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SudokuBoard;","import React from 'react';\nimport SudokuBoard from './components/SudokuBoard';\nimport './styles/App.css';\nimport './styles/SudokuBoard.css';\nimport './styles/SudokuValueBox.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SudokuBoard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}